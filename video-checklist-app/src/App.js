import React, { useState, useEffect } from "react";
import "./App.css";

/* ------------------------------
   13 „Çπ„ÉÜ„ÉÉ„Éó + „ÇÑ„Åï„Åó„ÅÑ„Éí„É≥„Éà
--------------------------------*/
const steps = [
  {
    title: "ÂãïÁîª„ÅÆÁõÆÁöÑ„ÇíÊ±∫„ÇÅ„Çã",
    hint: "Ë™∞„Å´‰Ωï„ÇíÂ±ä„Åë„Åü„ÅÑÔºü„Åæ„Åö„ÅØ„Ç¥„Éº„É´„Çí„Ç§„É°„Éº„Ç∏ÔºÅ",
    fields: [
      { label: "ÁõÆÁöÑÔºà‰æãÔºöÂëäÁü•„ÉªÂÖ±ÊÑü„ÉªÁ¥π‰ªã„Å™„Å©Ôºâ", opts: ["ÂëäÁü•", "ÂÖ±ÊÑü", "Á¥π‰ªã", "ÂãüÈõÜ"] }
    ]
  },
  {
    title: "„Çø„Éº„Ç≤„ÉÉ„Éà„ÇíËÄÉ„Åà„Çã",
    hint: "ÂÖ∑‰ΩìÁöÑ„Å™‰∫∫Áâ©ÂÉè„ÇíÊÄù„ÅÑÊµÆ„Åã„Åπ„Å¶„Åø„Çà„ÅÜ",
    fields: [{ label: "‰∫∫Áâ©ÂÉèÔºà‰æãÔºöÂ∞±Ê¥ª‰∏≠„ÅÆÂ≠¶Áîü„Å™„Å©Ôºâ", opts: [] }]
  },
  {
    title: "„Éà„Éº„É≥„ÇíÈÅ∏„Å∂",
    hint: "ÂãïÁîª„ÅÆÈõ∞Âõ≤Ê∞ó„Çí„Å≤„Å®„Åì„Å®„ÅßÔºÅ",
    fields: [
      { label: "Èõ∞Âõ≤Ê∞óÔºà‰æãÔºöÁúüÈù¢ÁõÆ„Éª„Å´„Åé„ÇÑ„Åã„Éª„ÇÑ„Åï„Åó„ÅÑÔºâ", opts: ["ÁúüÈù¢ÁõÆ", "„Å´„Åé„ÇÑ„Åã", "„ÇÑ„Åï„Åó„ÅÑ"] }
    ]
  },
  {
    title: "‰ºù„Åà„Åü„ÅÑ„Åì„Å®„Çí3„Å§„Å´Áµû„Çã",
    hint: "Ë¶ÅÁÇπ„Çí3„Å§„Å´„Åô„Çã„Å®‰ºù„Çè„Çä„ÇÑ„Åô„ÅÑ„ÇàÔºÅ",
    fields: [
      { label: "„Éù„Ç§„É≥„Éà‚ë†", opts: [] },
      { label: "„Éù„Ç§„É≥„Éà‚ë°", opts: [] },
      { label: "„Éù„Ç§„É≥„Éà‚ë¢", opts: [] }
    ]
  },
  {
    title: "1Êñá„Åß„Åæ„Å®„ÇÅ„Çã",
    hint: "„Ç≠„É£„ÉÉ„ÉÅ„Ç≥„Éî„Éº„ÅÆ„Çà„ÅÜ„Å´„ÇÆ„É•„ÉÉ„Å®ÔºÅ",
    fields: [{ label: "„Åæ„Å®„ÇÅ„ÅÆ1Êñá", opts: [] }]
  },
  {
    title: "„Å©„ÅÜÂßã„ÇÅ„ÇãÔºüÔºàÂ∞éÂÖ•Ôºâ",
    hint: "ÊúÄÂàù„ÅÆ3Áßí„Åß„Ç∞„ÉÉ„Å®Âºï„Åç„Å§„Åë„Çà„ÅÜ",
    fields: [{ label: "Â∞éÂÖ•Ê°à", opts: [] }]
  },
  {
    title: "„Å©„ÅÜË¶ã„Åõ„ÇãÔºüÔºà‰∏≠Áõ§Ôºâ",
    hint: "3„Å§„ÅÆ„Éù„Ç§„É≥„Éà„Çí„Å©„ÅÜË¶ã„Åõ„ÇãÔºü",
    fields: [{ label: "ÊßãÊàê„Ç§„É°„Éº„Ç∏", opts: [] }]
  },
  {
    title: "„Å©„ÅÜÁµÇ„Çè„ÇãÔºüÔºà„Åæ„Å®„ÇÅÔºâ",
    hint: "Ë¶ãÁµÇ„Çè„Å£„ÅüÂæå„ÄÅ„Å©„Çì„Å™Ê∞óÊåÅ„Å°„ÇíÊÆã„ÅôÔºü",
    fields: [{ label: "Á∑†„ÇÅ„ÅÆË®ÄËëâ„ÇÑÂç∞Ë±°„Å•„Åë", opts: [] }]
  },
  {
    title: "„Çπ„ÇØ„É™„Éó„Éà„ÇíÊõ∏„Åè",
    hint: "„Åó„ÇÉ„Åπ„ÇãË®ÄËëâ„Çí„Çª„É™„ÉïÂΩ¢Âºè„ÅßÊõ∏„ÅÑ„Å¶„Åø„Çà„ÅÜ",
    fields: [{ label: "Âè∞Êú¨„É°„É¢", opts: [] }]
  },
  {
    title: "ÊíÆÂΩ±„Åô„Çã",
    hint: "Ê∑±ÂëºÂê∏„Åó„Å¶„É™„É©„ÉÉ„ÇØ„Çπ„ÄÅ„Åæ„Åö1Êú¨ÔºÅ",
    fields: [
      { label: "ÊíÆÂΩ±ÂÆå‰∫ÜÔºü", opts: ["„ÅØ„ÅÑ", "Êú™"] }
    ]
  },
  {
    title: "Á∑®ÈõÜ„Åô„Çã",
    hint: "‰∏çË¶Å„Å™ÈÉ®ÂàÜ„Çí„Ç´„ÉÉ„Éà„ÄÅ„ÉÜ„É≠„ÉÉ„Éó„ÇíÂÖ•„Çå„Çà„ÅÜ",
    fields: [{ label: "Á∑®ÈõÜ„É°„É¢", opts: [] }]
  },
  {
    title: "ÊäïÁ®ø„Åô„Çã",
    hint: "ÂãáÊ∞ó„ÇíÂá∫„Åó„Å¶ÂÖ¨ÈñãÔºÅÂøúÊè¥„Åó„Å¶„Çã„Çà‚ú®",
    fields: [
      { label: "ÊäïÁ®øÂÆå‰∫ÜÔºü", opts: ["„ÅØ„ÅÑ", "Êú™"] }
    ]
  },
  {
    title: "ÊäïÁ®øÂæå„Å´„Åµ„Çä„Åã„Åà„Çã",
    hint: "ËâØ„Åã„Å£„ÅüÁÇπ„ÉªÊ¨°„ÅÆÊîπÂñÑÁÇπ„Çí„É°„É¢„Åó„Çà„ÅÜ",
    fields: [{ label: "ÊåØ„ÇäËøî„Çä„É°„É¢", opts: [] }]
  }
];

/* üéâ „É©„É≥„ÉÄ„É†„Åª„ÇÅ„Ç≥„É°„É≥„Éà */
const praises = ["Great job! üéâ", "„Åô„Åî„ÅÑÔºÅÂÆåÁíßÔºÅ‚ú®", "„Éê„ÉÉ„ÉÅ„É™ÔºÅüëè"];

/* üê£ „Çπ„Çø„É≥„ÉóÈÄ≤Âåñ„ÉÜ„Éº„Éñ„É´ */
const stampTable = [
  { count: 0, icon: "ü•ö" },
  { count: 1, icon: "üê£" },
  { count: 2, icon: "üê£üéÄ" },
  { count: 3, icon: "üê•" },
  { count: 5, icon: "üê•‚ú®" },
  { count: 7, icon: "üïäÔ∏è" },
  { count: 10, icon: "üïäÔ∏èüåü" },
  { count: 13, icon: "üåàüïäÔ∏è‚ú®" }
];

export default function App() {
  /* ÂÖ•Âäõ„É°„É¢„Å®ÈÅîÊàêÁä∂Ê≥Å„Çí‰øùÂ≠ò */
  const [notes, setNotes] = useState(() => JSON.parse(localStorage.getItem("notes") || "{}"));
  const [completed, setCompleted] = useState(() => JSON.parse(localStorage.getItem("completed") || "[]"));
  const [praise, setPraise] = useState("");

  /* „É≠„Éº„Ç´„É´‰øùÂ≠ò */
  useEffect(() => {
    localStorage.setItem("notes", JSON.stringify(notes));
    localStorage.setItem("completed", JSON.stringify(completed));
  }, [notes, completed]);

  /* ÂÖ•ÂäõÂ§âÊõ¥„Éè„É≥„Éâ„É© */
  const handleChange = (sIdx, fIdx, val) => {
    setNotes(prev => {
      const next = { ...prev, [sIdx]: { ...(prev[sIdx] || {}), [fIdx]: val } };
      const allFilled = steps[sIdx].fields.every((_, i) => (next[sIdx]?.[i] || "").trim());

      if (allFilled && !completed[sIdx]) {
        setCompleted(prevC => {
          const up = [...prevC];
          up[sIdx] = true;
          return up;
        });
        setPraise(praises[Math.floor(Math.random() * praises.length)]);
        setTimeout(() => setPraise(""), 2500);
      }
      return next;
    });
  };

  /* „Çπ„Çø„É≥„ÉóË®àÁÆó */
  const achievedCount = completed.filter(Boolean).length;
  const currentStamp = [...stampTable].reverse().find(s => achievedCount >= s.count)?.icon || "ü•ö";

  /* ---- UI ---- */
  return (
    <div className="app-container">
      <h1 className="title">üì£ „Åª„ÇÅ„Ç≠„É£„Çπ ‚ú®</h1>

      {/* „Çπ„Çø„É≥„Éó */}
      <div className="stamp-display" title={`ÈÅîÊàê: ${achievedCount}/13`}>
        {currentStamp} ({achievedCount}/13)
      </div>

      {/* „Åª„ÇÅ„Ç≥„É°„É≥„Éà */}
      {praise && <div className="praise">{praise}</div>}

      {/* „Çπ„ÉÜ„ÉÉ„ÉóË°®Á§∫ */}
      {steps.map((step, sIdx) => (
        <div key={sIdx} className={`step ${completed[sIdx] ? "done" : ""}`}>
          <label className="step-header">
            <input
              type="checkbox"
              checked={completed[sIdx] || false}
              onChange={(e) => {
                const up = [...completed];
                up[sIdx] = e.target.checked;
                setCompleted(up);
              }}
            />
            <h2 className="step-title">{`${sIdx}. ${step.title}`}</h2>
          </label>

          {/* „Éí„É≥„Éà */}
          {!completed[sIdx] && (
            <div className="hint-bubble">üí° {step.hint}</div>
          )}

          {/* „Éï„Ç£„Éº„É´„Éâ */}
          {step.fields.map((field, fIdx) => {
            const id = `dl-${sIdx}-${fIdx}`;
            const value = notes[sIdx]?.[fIdx] || "";
            return (
              <div className="field" key={fIdx}>
                <label className="field-label">{field.label}</label>
                {field.opts.length ? (
                  <>
                    <input
                      list={id}
                      className="field-input"
                      value={value}
                      onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                      placeholder="ÈÅ∏Êäû„Åæ„Åü„ÅØÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                    />
                    <datalist id={id}>
                      {field.opts.map(opt => <option key={opt} value={opt} />)}
                    </datalist>
                  </>
                ) : (
                  <input
                    type="text"
                    className="field-input"
                    value={value}
                    onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                    placeholder="ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                  />
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
}
