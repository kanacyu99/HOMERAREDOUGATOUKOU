import React, { useState, useEffect } from "react";
import "./App.css";

/* ------------------------------
   „Çπ„ÉÜ„ÉÉ„ÉóÂÆöÁæ©
   STEP0 „Å†„ÅëË©≥Á¥∞ÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ‰ªò„Åç
--------------------------------*/
const steps = [
  {
    title: "ÁõÆÊ®ôË®≠ÂÆö„Éª„Ç≥„É≥„Çª„Éó„ÉàÊ±∫„ÇÅ",
    fields: [
      {
        label: "ÁõÆÁöÑ",
        key: "purpose",
        opts: [
          "Ë™çÁü•Â∫¶Âêë‰∏ä",
          "Ë≤©Â£≤‰øÉÈÄ≤",
          "„Éñ„É©„É≥„Éá„Ç£„É≥„Ç∞",
          "Êé°Áî®Ê¥ªÂãï",
          "Á§æÂÜÖÊïôËÇ≤"
        ]
      },
      { label: "Ë¶ñËÅ¥ËÄÖ„Çø„Éº„Ç≤„ÉÉ„Éà", key: "audience", opts: [] },
      {
        label: "ÂãïÁîª„Ç∏„É£„É≥„É´",
        key: "genre",
        opts: ["Ëß£Ë™¨", "Vlog", "Â∫ÉÂëä", "„É¨„Éì„É•„Éº", "„Ç∑„Éß„Éº„ÉàÂãïÁîª"]
      },
      {
        label: "ÊàêÂäü„ÅÆÂÆöÁæ©",
        key: "success",
        opts: ["ÂÜçÁîüÊï∞", "ÁôªÈå≤ËÄÖÊï∞", "Ë≤©Â£≤", "Ë™çÁü•"]
      }
    ]
  },
     {
    title: "„Ç¢„Ç§„Éá„Ç¢Âá∫„Åó„Éª‰ºÅÁîª",
    fields: [
      { label: "‰ºÅÁîª„Çø„Ç§„Éà„É´", key: "planTitle", opts: [] },
      { label: "ÂãïÁîª„ÅÆ„Éà„Éº„É≥", key: "tone", opts: ["ÁúüÈù¢ÁõÆ", "„ÇÜ„Çã„ÅÑ", "„Åä„ÇÇ„Åó„ÇçÁ≥ª", "ÊÑüÂãïÁ≥ª"] },
      { label: "ÊßãÊàê„É°„É¢", key: "structureMemo", opts: [] }
    ]
  }
];
  // ‚ë°‰ª•Èôç„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅØÂæå„ÅßÊã°Âºµ
];

const praises = [
  "„Åô„Åî„ÅÑÔºÅÂÆåÁíß„Å†„Å≠ÔºÅ‚ú®",
  "Great job! üéâ",
  "„Éê„ÉÉ„ÉÅ„É™ÔºÅüëè"
];

export default function App() {
  /* ------------------------------
     notes = { stepIdx: { fieldIdx: value } }
  --------------------------------*/
  const [notes, setNotes] = useState(() =>
    JSON.parse(localStorage.getItem("notes") || "{}")
  );
  const [praise, setPraise] = useState("");

  // ‰øùÂ≠ò
  useEffect(() => {
    localStorage.setItem("notes", JSON.stringify(notes));
  }, [notes]);

  // STEP0 „ÅåÂÖ®ÂÖ•Âäõ„Åï„Çå„Åü„ÇâË§í„ÇÅ„Çã
  useEffect(() => {
    const firstStep = steps[0];
    const filled = firstStep.fields.every((_, idx) =>
      (notes[0]?.[idx] || "").trim()
    );
    if (filled && praise === "") {
      setPraise(praises[Math.floor(Math.random() * praises.length)]);
      const timer = setTimeout(() => setPraise(""), 3000);
      return () => clearTimeout(timer);
    }
  }, [notes, praise]);

  const handleChange = (sIdx, fIdx, val) => {
    setNotes((prev) => ({
      ...prev,
      [sIdx]: { ...(prev[sIdx] || {}), [fIdx]: val }
    }));
  };

  return (
    <div className="app-container">
      <h1 className="title">üì£ „Åª„ÇÅ„Ç≠„É£„Çπ ‚ú®</h1>
      {praise && <div className="praise">{praise}</div>}

      {steps.map((step, sIdx) => (
        <div key={sIdx} className="step">
          <h2 className="step-title">{step.title}</h2>
          {step.fields.map((field, fIdx) => {
            const id = `dl-${sIdx}-${fIdx}`;
            const value = notes[sIdx]?.[fIdx] || "";
            return (
              <div className="field" key={fIdx}>
                <label className="field-label">{field.label}</label>
                {field.opts && field.opts.length ? (
                  <>
                    {/* „ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ + datalist„ÅßÂÄôË£úË°®Á§∫ */}
                    <input
                      list={id}
                      className="field-input"
                      value={value}
                      onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                      placeholder="ÈÅ∏Êäû„Åæ„Åü„ÅØÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                    />
                    <datalist id={id}>
                      {field.opts.map((opt) => (
                        <option key={opt} value={opt} />
                      ))}
                    </datalist>
                  </>
                ) : (
                  <input
                    type="text"
                    className="field-input"
                    value={value}
                    onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                    placeholder="ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                  />
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
}
