import React, { useState, useEffect } from "react";
import "./App.css";

// üéØ 13„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂÆöÁæ©
const steps = [
  {
    title: "„Éà„Éº„É≥„ÇíÈÅ∏„Å∂",
    fields: [
      {
        label: "„Éà„Éº„É≥",
        opts: ["ÂÖÉÊ∞ó", "ÁúüÈù¢ÁõÆ", "Ë™†ÂÆü", "Ë¶™„Åó„Åø„ÇÑ„Åô„ÅÑ", "ÊÉÖÁÜ±ÁöÑ"],
      },
    ],
  },
  {
    title: "ÊßãÊàê„É°„É¢„ÇíÊõ∏„Åè",
    fields: [
      {
        label: "ÊßãÊàê„É°„É¢",
        opts: [],
      },
    ],
  },
  {
    title: "Âè∞Êú¨„ÇíÊõ∏„Åè",
    fields: [
      {
        label: "Âè∞Êú¨",
        opts: [],
      },
    ],
  },
  {
    title: "ÂãïÁîª„Çø„Ç§„Éà„É´„ÇíËÄÉ„Åà„Çã",
    fields: [
      {
        label: "„Çø„Ç§„Éà„É´Ê°à",
        opts: [],
      },
    ],
  },
  {
    title: "ÊäïÁ®ø‰∫àÂÆöÊó•„ÇíÊ±∫„ÇÅ„Çã",
    fields: [
      {
        label: "‰∫àÂÆöÊó•Ôºà‰æãÔºö2025-07-20Ôºâ",
        opts: [],
      },
    ],
  },
  {
    title: "„Çµ„É†„Éç„Ç§„É´ÊßãÊÉ≥",
    fields: [
      {
        label: "„Çµ„É†„ÉçÊ°à",
        opts: [],
      },
    ],
  },
  {
    title: "ÊíÆÂΩ±ÊôÇ„ÅÆÊ≥®ÊÑèÁÇπ„ÇíÊõ∏„Åè",
    fields: [
      {
        label: "Ê≥®ÊÑèÁÇπ„É°„É¢",
        opts: [],
      },
    ],
  },
  {
    title: "ÊíÆÂΩ±Êó•„ÇíÊ±∫„ÇÅ„Çã",
    fields: [
      {
        label: "ÊíÆÂΩ±Êó•Ôºà‰æãÔºö2025-07-22Ôºâ",
        opts: [],
      },
    ],
  },
  {
    title: "ÊíÆÂΩ±ÂÆå‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ",
    fields: [
      {
        label: "ÊíÆÂΩ±ÂÆå‰∫Ü„É°„É¢",
        opts: [],
      },
    ],
  },
  {
    title: "Á∑®ÈõÜ„ÅÆÊñπÂêëÊÄß„ÇíÊõ∏„Åè",
    fields: [
      {
        label: "Á∑®ÈõÜ„Ç§„É°„Éº„Ç∏",
        opts: [],
      },
    ],
  },
  {
    title: "BGM„ÇÑÂäπÊûúÈü≥„ÇíËÄÉ„Åà„Çã",
    fields: [
      {
        label: "Èü≥Ê•Ω„Ç§„É°„Éº„Ç∏",
        opts: [],
      },
    ],
  },
  {
    title: "ÊäïÁ®øÊñá„ÇíËÄÉ„Åà„Çã",
    fields: [
      {
        label: "ÊäïÁ®øÊñáÊ°à",
        opts: [],
      },
    ],
  },
  {
    title: "„ÉÅ„Çß„ÉÉ„ÇØÔºÜÊúÄÁµÇÁ¢∫Ë™ç",
    fields: [
      {
        label: "ÊúÄÁµÇ„ÉÅ„Çß„ÉÉ„ÇØ„É°„É¢",
        opts: [],
      },
    ],
  },
];

const praises = ["Great job! üéâ", "„Åô„Åî„ÅÑÔºÅÂÆåÁíßÔºÅ‚ú®", "„Éê„ÉÉ„ÉÅ„É™ÔºÅüëè"];

const stampTable = [
  { count: 0, icon: "ü•ö" },
  { count: 1, icon: "üê£" },
  { count: 3, icon: "üê•" },
  { count: 6, icon: "üïäÔ∏è" },
  { count: 9, icon: "üïäÔ∏èüí´" },
  { count: 13, icon: "üåàüïäÔ∏è‚ú®" },
];

export default function App() {
  const [notes, setNotes] = useState(() => JSON.parse(localStorage.getItem("notes") || "{}"));
  const [done, setDone] = useState(() => JSON.parse(localStorage.getItem("done") || "[]"));
  const [praise, setPraise] = useState("");

  useEffect(() => {
    localStorage.setItem("notes", JSON.stringify(notes));
    localStorage.setItem("done", JSON.stringify(done));
  }, [notes, done]);

  const handleChange = (sIdx, fIdx, val) => {
    setNotes((prev) => {
      const next = { ...prev, [sIdx]: { ...(prev[sIdx] || {}), [fIdx]: val } };
      const allFilled = steps[sIdx].fields.every((_, i) => (next[sIdx]?.[i] || "").trim());
      if (allFilled && !done.includes(sIdx)) {
        setDone((prev) => [...prev, sIdx]);
        setPraise(praises[Math.floor(Math.random() * praises.length)]);
        setTimeout(() => setPraise(""), 2500);
      } else if (!allFilled && done.includes(sIdx)) {
        setDone((prev) => prev.filter((i) => i !== sIdx));
      }
      return next;
    });
  };

  const achieved = done.length;
  const stamp = [...stampTable].reverse().find((s) => achieved >= s.count)?.icon || "ü•ö";

  return (
    <div className="app-container">
      <h1 className="title">üì£ „Åª„ÇÅ„Ç≠„É£„Çπ ‚ú®</h1>

      <div className="stamp-display" title={`ÈÅîÊàê: ${achieved} / ${steps.length}`}>
        {stamp} ({achieved} / {steps.length})
      </div>

      {praise && <div className="praise">{praise}</div>}

      {steps.map((step, sIdx) => (
        <div key={sIdx} className={`step ${done.includes(sIdx) ? "done" : ""}`}>
          <label className="step-header">
            <input
              type="checkbox"
              checked={done.includes(sIdx)}
              onChange={(e) => {
                const isChecked = e.target.checked;
                setDone((prev) =>
                  isChecked ? [...prev, sIdx] : prev.filter((i) => i !== sIdx)
                );
              }}
            />
            <h2 className="step-title">{`${sIdx + 1}. ${step.title}`}</h2>
          </label>

          {step.fields.map((field, fIdx) => {
            const id = `dl-${sIdx}-${fIdx}`;
            const val = notes[sIdx]?.[fIdx] || "";
            return (
              <div key={fIdx} className="field">
                <label className="field-label">{field.label}</label>
                {field.opts.length > 0 ? (
                  <>
                    <input
                      list={id}
                      className="field-input"
                      value={val}
                      onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                      placeholder="ÈÅ∏Êäû„Åæ„Åü„ÅØÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                    />
                    <datalist id={id}>
                      {field.opts.map((opt) => (
                        <option key={opt} value={opt} />
                      ))}
                    </datalist>
                  </>
                ) : (
                  <input
                    type="text"
                    className="field-input"
                    value={val}
                    onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                    placeholder="ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                  />
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
}
