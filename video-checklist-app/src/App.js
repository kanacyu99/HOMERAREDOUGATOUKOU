import React, { useState, useEffect } from "react";
import "./App.css";

/* ------------------------------
   „Çπ„ÉÜ„ÉÉ„ÉóÂÆöÁæ©ÔºàSTEP0ÔΩûSTEP2Ôºâ
--------------------------------*/
const steps = [
  {
    title: "ÁõÆÊ®ôË®≠ÂÆö„Éª„Ç≥„É≥„Çª„Éó„ÉàÊ±∫„ÇÅ",
    fields: [
      {
        label: "ÁõÆÁöÑ",
        key: "purpose",
        opts: ["Ë™çÁü•Â∫¶Âêë‰∏ä", "Ë≤©Â£≤‰øÉÈÄ≤", "„Éñ„É©„É≥„Éá„Ç£„É≥„Ç∞", "Êé°Áî®Ê¥ªÂãï", "Á§æÂÜÖÊïôËÇ≤"]
      },
      { label: "Ë¶ñËÅ¥ËÄÖ„Çø„Éº„Ç≤„ÉÉ„Éà", key: "audience", opts: [] },
      {
        label: "ÂãïÁîª„Ç∏„É£„É≥„É´",
        key: "genre",
        opts: ["Ëß£Ë™¨", "Vlog", "Â∫ÉÂëä", "„É¨„Éì„É•„Éº", "„Ç∑„Éß„Éº„ÉàÂãïÁîª"]
      },
      {
        label: "ÊàêÂäü„ÅÆÂÆöÁæ©",
        key: "success",
        opts: ["ÂÜçÁîüÊï∞", "ÁôªÈå≤ËÄÖÊï∞", "Ë≤©Â£≤", "Ë™çÁü•"]
      }
    ]
  },
  {
    title: "„Ç¢„Ç§„Éá„Ç¢Âá∫„Åó„Éª‰ºÅÁîª",
    fields: [
      { label: "‰ºÅÁîª„Çø„Ç§„Éà„É´", key: "planTitle", opts: [] },
      {
        label: "ÂãïÁîª„ÅÆ„Éà„Éº„É≥",
        key: "tone",
        opts: ["ÁúüÈù¢ÁõÆ", "„ÇÜ„Çã„ÅÑ", "„Åä„ÇÇ„Åó„ÇçÁ≥ª", "ÊÑüÂãïÁ≥ª"]
      },
      { label: "ÊßãÊàê„É°„É¢", key: "structureMemo", opts: [] }
    ]
  },
  {
    title: "Âè∞Êú¨„ÉªÊßãÊàêË®≠Ë®à",
    fields: [
      { label: "Â§ßÊû†ÊßãÊàêÔºàÂ∞éÂÖ•„ÉªÊú¨Á∑®„Éª„Åæ„Å®„ÇÅÔºâ", key: "outline", opts: [] },
      { label: "Ë©≥Á¥∞„Å™Âè∞Êú¨", key: "script", opts: [] },
      { label: "„Çª„É™„Éï„Éª„Éä„É¨„Éº„Ç∑„Éß„É≥ÂéüÁ®ø", key: "lines", opts: [] },
      { label: "„Çπ„Éà„Éº„É™„Éº„Éú„Éº„ÉâÊ°à", key: "storyboard", opts: [] },
      { label: "„Ç´„ÉÉ„ÉàÂâ≤„ÇäË®àÁîª", key: "cuts", opts: [] },
      { label: "BGM/ÂäπÊûúÈü≥„Ç§„É°„Éº„Ç∏", key: "sound", opts: [] }
    ]
  }
];

const toneTemplates = {
  ÁúüÈù¢ÁõÆ: `„ÄêÂ∞éÂÖ•„Äë\nË™≤È°å„ÇÑÁõÆÁöÑ„ÇíÁ´ØÁöÑ„Å´ÊèêÁ§∫\n\n„ÄêÊú¨Á∑®„Äë\n‰∫ãÂÆü„Éª„Éá„Éº„Çø„Å´Âü∫„Å•„ÅèË™¨Êòé\n\n„Äê„Åæ„Å®„ÇÅ„Äë\nÂæó„Çâ„Çå„Çã„É°„É™„ÉÉ„Éà„Å®Ê¨°„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥`,
  „ÇÜ„Çã„ÅÑ: `„ÄêÂ∞éÂÖ•„Äë\n„É©„Éï„Å™Ëá™Â∑±Á¥π‰ªã„ÇÑÊå®Êã∂\n\n„ÄêÊú¨Á∑®„Äë\nÈõëË´á„Çí‰∫§„Åà„Å§„Å§ÂÜÖÂÆπÁ¥π‰ªã\n\n„Äê„Åæ„Å®„ÇÅ„Äë\nË¶ñËÅ¥ËÄÖ„Å∏„ÅÆÂëº„Å≥„Åã„ÅëÔºãÁµÇ„Çè„Çä„ÅÆÊå®Êã∂`,
  „Åä„ÇÇ„Åó„ÇçÁ≥ª: `„ÄêÂ∞éÂÖ•„Äë\nÁ¨ë„Åà„Çã„Éï„ÉÉ„ÇØ„ÇÑÂ∞è„Éç„Çø\n\n„ÄêÊú¨Á∑®„Äë\n„Éç„Çø ‚Üí „Ç™„ÉÅ „Åß„ÉÜ„É≥„ÉùËâØ„Åè\n\n„Äê„Åæ„Å®„ÇÅ„Äë\n„É™„Ç¢„ÇØ„Ç∑„Éß„É≥ÂãüÈõÜ„ÇÑÊ¨°Âõû‰∫àÂëä`,
  ÊÑüÂãïÁ≥ª: `„ÄêÂ∞éÂÖ•„Äë\nÂõ∞Èõ£„Å™Áä∂Ê≥Å„ÅÆÊèêÁ§∫\n\n„ÄêÊú¨Á∑®„Äë\nÂä™Âäõ„ÅÆÈÅéÁ®ã„ÇÑ„Ç®„Éî„ÇΩ„Éº„Éâ\n\n„Äê„Åæ„Å®„ÇÅ„Äë\nË¶ñËÅ¥ËÄÖ„Å∏„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏ & CTA`
};

const praises = [
  "„Åô„Åî„ÅÑÔºÅÂÆåÁíß„Å†„Å≠ÔºÅ‚ú®",
  "Great job! üéâ",
  "„Éê„ÉÉ„ÉÅ„É™ÔºÅüëè",
  "„ÇÇ„ÅÜ„Éó„É≠„É¨„Éô„É´ÔºÅüíØ",
  "ÊÑüÂãï„Åó„Åü„ÇàÔºÅü•π",
  "È†ÜË™ø„Åô„Åé„ÇãÔºÅüöÄ"
];

export default function App() {
  const [notes, setNotes] = useState(() =>
    JSON.parse(localStorage.getItem("notes") || "{}")
  );
  const [praise, setPraise] = useState("");

  useEffect(() => {
    localStorage.setItem("notes", JSON.stringify(notes));
  }, [notes]);

  useEffect(() => {
    const unfinishedIndex = steps.findIndex((step, sIdx) => {
      return !step.fields.every((_, fIdx) => (notes[sIdx]?.[fIdx] || "").trim());
    });

    if (unfinishedIndex === -1 && praise === "") {
      setPraise("üéâ ÂÖ®„Çπ„ÉÜ„ÉÉ„ÉóÈÅîÊàêÔºÅ„Åô„Å∞„Çâ„Åó„ÅÑÔºÅÔºÅüéä");
    } else if (unfinishedIndex > 0 && (notes[unfinishedIndex - 1] || {}).checked !== true) {
      setPraise(praises[Math.floor(Math.random() * praises.length)]);
      setNotes((prev) => ({
        ...prev,
        [unfinishedIndex - 1]: {
          ...(prev[unfinishedIndex - 1] || {}),
          checked: true
        }
      }));
      const timer = setTimeout(() => setPraise(""), 3000);
      return () => clearTimeout(timer);
    }
  }, [notes, praise]);

  const handleChange = (sIdx, fIdx, val) => {
    setNotes((prev) => {
      const next = { ...prev, [sIdx]: { ...(prev[sIdx] || {}), [fIdx]: val } };
      if (sIdx === 1 && steps[1].fields[fIdx].key === "tone") {
        const memoIdx = 2;
        if (!next[1]?.[memoIdx]) {
          const template = toneTemplates[val] || "";
          if (template) {
            next[1][memoIdx] = template;
          }
        }
      }
      return next;
    });
  };

  return (
    <div className="app-container">
      <h1 className="title">üì£ „Åª„ÇÅ„Ç≠„É£„Çπ ‚ú®</h1>
      {praise && <div className="praise">{praise}</div>}

      {steps.map((step, sIdx) => (
        <div key={sIdx} className="step">
          <h2 className="step-title">{step.title}</h2>
          {step.fields.map((field, fIdx) => {
            const id = `dl-${sIdx}-${fIdx}`;
            const value = notes[sIdx]?.[fIdx] || "";
            return (
              <div className="field" key={fIdx}>
                <label className="field-label">{field.label}</label>
                {field.opts.length ? (
                  <>
                    <input
                      list={id}
                      className="field-input"
                      value={value}
                      onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                      placeholder="ÈÅ∏Êäû„Åæ„Åü„ÅØÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                    />
                    <datalist id={id}>
                      {field.opts.map((opt) => (
                        <option key={opt} value={opt} />
                      ))}
                    </datalist>
                  </>
                ) : (
                  <input
                    type="text"
                    className="field-input"
                    value={value}
                    onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                    placeholder="ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                  />
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
}
