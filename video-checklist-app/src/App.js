import React, { useState, useEffect } from "react";
import "./App.css";

/* ------------------------------
   0„Äú12ÔºöÂãïÁîªÂà∂‰Ωú„Éï„É≠„ÉºÂÖ®„Çπ„ÉÜ„ÉÉ„Éó
--------------------------------*/
const steps = [
  /* 0. ÁõÆÊ®ôË®≠ÂÆö„Éª„Ç≥„É≥„Çª„Éó„ÉàÊ±∫„ÇÅ */
  {
    title: "ÁõÆÊ®ôË®≠ÂÆö„Éª„Ç≥„É≥„Çª„Éó„ÉàÊ±∫„ÇÅ",
    fields: [
      { label: "ÁõÆÁöÑ", key: "purpose", opts: ["Ë™çÁü•Â∫¶Âêë‰∏ä","Ë≤©Â£≤‰øÉÈÄ≤","„Éñ„É©„É≥„Éá„Ç£„É≥„Ç∞","Êé°Áî®Ê¥ªÂãï","Á§æÂÜÖÊïôËÇ≤"] },
      { label: "Ë¶ñËÅ¥ËÄÖ„Çø„Éº„Ç≤„ÉÉ„Éà", key: "audience", opts: [] },
      { label: "ÂãïÁîª„Ç∏„É£„É≥„É´", key: "genre", opts: ["Ëß£Ë™¨","Vlog","Â∫ÉÂëä","„É¨„Éì„É•„Éº","„Ç∑„Éß„Éº„ÉàÂãïÁîª"] },
      { label: "ÊàêÂäü„ÅÆÂÆöÁæ©", key: "success", opts: ["ÂÜçÁîüÊï∞","ÁôªÈå≤ËÄÖÊï∞","Ë≤©Â£≤","Ë™çÁü•"] }
    ]
  },

  /* 1. „Ç¢„Ç§„Éá„Ç¢Âá∫„Åó„Éª‰ºÅÁîª */
  {
    title: "„Ç¢„Ç§„Éá„Ç¢Âá∫„Åó„Éª‰ºÅÁîª",
    fields: [
      { label: "‰ºÅÁîª„Çø„Ç§„Éà„É´", key: "planTitle", opts: [] },
      { label: "ÂãïÁîª„ÅÆ„Éà„Éº„É≥", key: "tone", opts: ["ÁúüÈù¢ÁõÆ","„ÇÜ„Çã„ÅÑ","„Åä„ÇÇ„Åó„ÇçÁ≥ª","ÊÑüÂãïÁ≥ª"] },
      { label: "ÊßãÊàê„É°„É¢", key: "structureMemo", opts: [] }
    ]
  },

  /* 2. Âè∞Êú¨„ÉªÊßãÊàêË®≠Ë®à */
  {
    title: "Âè∞Êú¨„ÉªÊßãÊàêË®≠Ë®à",
    fields: [
      { label: "Â§ßÊû†ÊßãÊàêÔºàÂ∞éÂÖ•„ÉªÊú¨Á∑®„Éª„Åæ„Å®„ÇÅÔºâ", key: "outline", opts: [] },
      { label: "Ë©≥Á¥∞„Å™Âè∞Êú¨", key: "script", opts: [] },
      { label: "„Çª„É™„Éï„Éª„Éä„É¨„Éº„Ç∑„Éß„É≥ÂéüÁ®ø", key: "lines", opts: [] },
      { label: "„Çπ„Éà„Éº„É™„Éº„Éú„Éº„ÉâÊ°à", key: "storyboard", opts: [] },
      { label: "„Ç´„ÉÉ„ÉàÂâ≤„ÇäË®àÁîª", key: "cuts", opts: [] },
      { label: "BGM/ÂäπÊûúÈü≥„Ç§„É°„Éº„Ç∏", key: "sound", opts: [] }
    ]
  },

  /* 3. ÊíÆÂΩ±Ë®àÁîª„ÉªÊ∫ñÂÇô */
  {
    title: "ÊíÆÂΩ±Ë®àÁîª„ÉªÊ∫ñÂÇô",
    fields: [
      { label: "ÊíÆÂΩ±„Çπ„Ç±„Ç∏„É•„Éº„É´", key: "schedule", opts: [] },
      { label: "„É≠„Ç±„Éº„Ç∑„Éß„É≥", key: "location", opts: [] },
      { label: "ÁÖßÊòé„Éó„É©„É≥", key: "lighting", opts: [] },
      { label: "„Ç´„É°„É©Ë®≠ÂÆö„É°„É¢", key: "camera", opts: [] },
      { label: "Â∞èÈÅìÂÖ∑/Ë°£Ë£Ö", key: "props", opts: [] }
    ]
  },

  /* 4. ÊíÆÂΩ± */
  {
    title: "ÊíÆÂΩ±",
    fields: [
      { label: "„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„É°„É¢", key: "setup", opts: [] },
      { label: "„ÉÜ„Çπ„ÉàÊíÆÂΩ±„É°„É¢", key: "testShoot", opts: [] },
      { label: "Êú¨Áï™ÊíÆÂΩ±„É°„É¢", key: "mainShoot", opts: [] },
      { label: "„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÊñπÊ≥ï", key: "backup", opts: [] }
    ]
  },

  /* 5. Á¥†ÊùêÊï¥ÁêÜ„ÉªÁÆ°ÁêÜ */
  {
    title: "Á¥†ÊùêÊï¥ÁêÜ„ÉªÁÆ°ÁêÜ",
    fields: [
      { label: "Âèñ„ÇäËæº„ÅøÁä∂Ê≥Å", key: "import", opts: [] },
      { label: "„Éï„Ç°„Ç§„É´Âêç„É´„Éº„É´", key: "naming", opts: [] },
      { label: "„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÁä∂Ê≥Å", key: "backupStatus", opts: [] },
      { label: "ËâØ„ÅÑ„ÉÜ„Ç§„ÇØÈÅ∏ÂÆö", key: "bestTake", opts: [] },
      { label: "„Çø„Ç∞‰ªò„Åë", key: "tagging", opts: [] }
    ]
  },

  /* 6. Á∑®ÈõÜÔºà„Éù„Çπ„Éà„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥Ôºâ */
  {
    title: "Á∑®ÈõÜÔºà„Éù„Çπ„Éà„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥Ôºâ",
    fields: [
      { label: "„Ç´„ÉÉ„ÉàÁ∑®ÈõÜÊñπÈáù", key: "cutPolicy", opts: [] },
      { label: "BGM/ÂäπÊûúÈü≥", key: "bgm", opts: [] },
      { label: "Â≠óÂπï„Éª„ÉÜ„É≠„ÉÉ„Éó", key: "caption", opts: [] },
      { label: "„Ç´„É©„Éº„Ç∞„É¨„Éº„Éá„Ç£„É≥„Ç∞", key: "grading", opts: [] },
      { label: "‰ªÆÊõ∏„ÅçÂá∫„Åó„ÉÅ„Çß„ÉÉ„ÇØ", key: "draftExport", opts: [] }
    ]
  },

  /* 7. „É¨„Éì„É•„Éº„Éª‰øÆÊ≠£ */
  {
    title: "„É¨„Éì„É•„Éº„Éª‰øÆÊ≠£",
    fields: [
      { label: "Ëá™Â∑±„É¨„Éì„É•„Éº", key: "selfReview", opts: [] },
      { label: "„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ", key: "feedback", opts: [] },
      { label: "‰øÆÊ≠£ÂÜÖÂÆπ", key: "fixes", opts: [] }
    ]
  },

  /* 8. Êõ∏„ÅçÂá∫„ÅóÔºà„É¨„É≥„ÉÄ„É™„É≥„Ç∞Ôºâ */
  {
    title: "Êõ∏„ÅçÂá∫„ÅóÔºà„É¨„É≥„ÉÄ„É™„É≥„Ç∞Ôºâ",
    fields: [
      { label: "Ëß£ÂÉèÂ∫¶/„Éï„É¨„Éº„É†Ë®≠ÂÆö", key: "exportSetting", opts: [] },
      { label: "Êõ∏„ÅçÂá∫„ÅóÂΩ¢Âºè", key: "codec", opts: [] },
      { label: "„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫ÊúÄÈÅ©Âåñ", key: "fileSize", opts: [] }
    ]
  },

  /* 9. „Çµ„É†„Éç„Ç§„É´„ÉªË™¨ÊòéÊñá‰ΩúÊàê */
  {
    title: "„Çµ„É†„Éç„Ç§„É´„ÉªË™¨ÊòéÊñá‰ΩúÊàê",
    fields: [
      { label: "„Çµ„É†„Éç„Ç§„É´Ê°à", key: "thumbnail", opts: [] },
      { label: "SEO„Ç≠„Éº„ÉØ„Éº„Éâ", key: "seo", opts: [] },
      { label: "Ë™¨ÊòéÊñá", key: "description", opts: [] },
      { label: "„Çø„Ç∞Ë®≠ÂÆö", key: "tags", opts: [] }
    ]
  },

  /* 10. ÂÖ¨ÈñãÊ∫ñÂÇô */
  {
    title: "ÂÖ¨ÈñãÊ∫ñÂÇô",
    fields: [
      { label: "„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÈÅ∏ÂÆö", key: "platform", opts: ["YouTube","TikTok","Instagram","Vimeo"] },
      { label: "ÂÖ¨Èñã„Çπ„Ç±„Ç∏„É•„Éº„É´", key: "schedulePub", opts: [] },
      { label: "ÊúÄÁµÇ„ÉÅ„Çß„ÉÉ„ÇØ", key: "finalCheck", opts: [] }
    ]
  },

  /* 11. ÂÖ¨Èñã */
  {
    title: "ÂÖ¨Èñã",
    fields: [
      { label: "„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâURL", key: "url", opts: [] },
      { label: "ÂëäÁü•ÊñπÊ≥ï", key: "announce", opts: ["SNS","„Éñ„É≠„Ç∞","„É°„Éº„É´"] },
      { label: "SNSÂÖ±ÊúâË®≠ÂÆö", key: "snsShare", opts: [] }
    ]
  },

  /* 12. ÂàÜÊûê„ÉªÊîπÂñÑÔºèÁ∂ôÁ∂öË®àÁîª */
  {
    title: "ÂàÜÊûê„ÉªÊîπÂñÑÔºèÁ∂ôÁ∂öË®àÁîª",
    fields: [
      { label: "Ë¶ñËÅ¥„Éá„Éº„ÇøÂàÜÊûê", key: "analytics", opts: [] },
      { label: "„Ç≥„É°„É≥„ÉàÊÑüÊÉ≥„É°„É¢", key: "comments", opts: [] },
      { label: "Ê¨°ÂõûÊîπÂñÑÁÇπ", key: "nextImprove", opts: [] },
      { label: "Á∂ôÁ∂ö„Ç¢„Ç§„Éá„Ç¢", key: "nextIdeas", opts: [] }
    ]
  }
];

/* üéâ Ë§í„ÇÅ„Ç≥„É°„É≥„Éà */
const praises = ["Great job! üéâ", "„Åô„Åî„ÅÑÔºÅÂÆåÁíßÔºÅ‚ú®", "„Éê„ÉÉ„ÉÅ„É™ÔºÅüëè"];

/* üê£ „Çπ„Çø„É≥„ÉóÈÄ≤Âåñ„ÉÜ„Éº„Éñ„É´ */
const stampTable = [
  { count: 0, icon: "ü•ö" },
  { count: 1, icon: "üê£" },
  { count: 2, icon: "üê£üéÄ" },
  { count: 3, icon: "üê•" },
  { count: 5, icon: "üê•‚ú®" },
  { count: 7, icon: "üïäÔ∏è" },
  { count: 10, icon: "üïäÔ∏èüåü" },
  { count: 13, icon: "üåàüïäÔ∏è‚ú®" }
];

export default function App() {
  const [notes, setNotes] = useState(() => JSON.parse(localStorage.getItem("notes") || "{}"));
  const [completed, setCompleted] = useState(() => JSON.parse(localStorage.getItem("completed") || "[]"));
  const [praise, setPraise] = useState("");

  /* ÂÖ•Âäõ„ÉªÂÆå‰∫ÜÁä∂ÊÖã„Çí‰øùÂ≠ò */
  useEffect(() => {
    localStorage.setItem("notes", JSON.stringify(notes));
    localStorage.setItem("completed", JSON.stringify(completed));
  }, [notes, completed]);

  /* ÂÖ•ÂäõÂ§âÊõ¥ + Ëá™ÂãïÈÅîÊàêÂà§ÂÆö */
  const handleChange = (sIdx, fIdx, val) => {
    setNotes((prev) => {
      const next = { ...prev, [sIdx]: { ...(prev[sIdx] || {}), [fIdx]: val } };

      /* „Çπ„ÉÜ„ÉÉ„ÉóÂÜÖ„Éï„Ç£„Éº„É´„Éâ„ÅåÂÖ®ÈÉ®Âüã„Åæ„Å£„Åü„ÇâÈÅîÊàê */
      const allFilled = steps[sIdx].fields.every((_, i) =>
        (next[sIdx]?.[i] || "").trim()
      );
      if (allFilled && !completed[sIdx]) {
        setCompleted((prevC) => {
          const up = [...prevC];
          up[sIdx] = true;
          return up;
        });
        setPraise(praises[Math.floor(Math.random() * praises.length)]);
        setTimeout(() => setPraise(""), 2500);
      }
      return next;
    });
  };

  /* „Çπ„Çø„É≥„ÉóÊ±∫ÂÆö */
  const achievedCount = completed.filter(Boolean).length;
  const currentStamp =
    [...stampTable].reverse().find((s) => achievedCount >= s.count)?.icon || "ü•ö";

  return (
    <div className="app-container">
      <h1 className="title">üì£ „Åª„ÇÅ„Ç≠„É£„Çπ ‚ú®</h1>

      {/* „Çπ„Çø„É≥„ÉóË°®Á§∫ */}
      <div className="stamp-display" title={`ÈÅîÊàê: ${achievedCount} / 13`}>
        {currentStamp} ({achievedCount}/13)
      </div>

      {praise && <div className="praise">{praise}</div>}

      {steps.map((step, sIdx) => (
        <div key={sIdx} className={`step ${completed[sIdx] ? "done" : ""}`}>
          {/* „Çπ„ÉÜ„ÉÉ„Éó„Éò„ÉÉ„ÉÄ„Éº */}
          <label className="step-header">
            <input
              type="checkbox"
              checked={completed[sIdx] || false}
              onChange={(e) => {
                const up = [...completed];
                up[sIdx] = e.target.checked;
                setCompleted(up);
              }}
            />
            <h2 className="step-title">{`${sIdx}. ${step.title}`}</h2>
          </label>

          {/* ÂêÑ„Éï„Ç£„Éº„É´„Éâ */}
          {step.fields.map((field, fIdx) => {
            const id = `dl-${sIdx}-${fIdx}`;
            const value = notes[sIdx]?.[fIdx] || "";
            return (
              <div className="field" key={fIdx}>
                <label className="field-label">{field.label}</label>
                {field.opts.length ? (
                  <>
                    <input
                      list={id}
                      className="field-input"
                      value={value}
                      onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                      placeholder="ÈÅ∏Êäû„Åæ„Åü„ÅØÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                    />
                    <datalist id={id}>
                      {field.opts.map((opt) => (
                        <option key={opt} value={opt} />
                      ))}
                    </datalist>
                  </>
                ) : (
                  <input
                    type="text"
                    className="field-input"
                    value={value}
                    onChange={(e) => handleChange(sIdx, fIdx, e.target.value)}
                    placeholder="ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                  />
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
}
